/** * Copyright (c) 2010 Periscopic, Inc | http://periscopic.com * * Relased under Eclipse Public License: * http://opensource.org/licenses/eclipse-1.0.php * * ---------------------------------------------------- * * Utility for mixing and splicing easing functions so * that greater flexibility in transitions are achievable. * * @author brett@periscopic.com * @see http://now.periscopic.com/2010/09/twine/ */package com.periscopic.utils{	public class Twine	{		/**		 * Finds the duration of a single or a sequence of		 * intervals where their duration being adjusted		 * by an easing equation. Only equations where the		 * slope is always positive will return valid answers,		 * since time always moves forward.		 *		 * @param trans			An easing function.		 * @param interval	Starting step (0 is first)		 * @param count			Total number of steps.		 * @param time			Total duration of all intervals.		 * @param steps			Number of steps to measure from		 * 									starting step.		 * @return					The correct value.		 * */		static public function getEasedInterval(trans:Function, interval:Number, count:Number, time:Number, steps:Number=1):Number {			return time * (trans((interval + steps - 1) / count, 0, 1, 1) - trans((interval - 1) / count, 0, 1, 1));		}		/*static public function getEasedInterval_fromFunc(trans:Function, interval:Number, count:Number, time:Number):Number {			 return time * (trans(interval / count, 0, 1, 1) - trans((interval - 1) / count, 0, 1, 1));		 }*/		/**		 * @param		trans			easing equation to use		 * @param		decimal		unEased value (0-1)		 * @return						The correct value		 */		static public function getEasedValue(trans:Function, decimal:Number, p_params:Object=null):Number {			if (p_params)				return (trans(decimal, 0, 1, 1, p_params))			return (trans(decimal, 0, 1, 1));		}		/**		 * Simultaneously combine easing functions.		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @param p_params 	Object: create using Twine.mixParams(...)		 * 				f				interpolation value		 * 				trans0	equation 1		 * 				trans1	equation 2		 * 				p1			params for trans 1		 * 				p2			params for trans 2		 * @return		The correct value.		 * */		static public function mix(t:Number, b:Number, c:Number, d:Number, p_params:Object):Number {			var trans0:Function=p_params.trans0;			var trans1:Function=p_params.trans1;			var f:Number=(!isNaN(p_params.f)) ? p_params.f : 0.5;			var t0:Number=((p_params.p0 != null) ? trans0(t, b, c, d, p_params.p0) : trans0(t, b, c, d)) * (1 - f);			var t1:Number=((p_params.p1 != null) ? trans1(t, b, c, d, p_params.p1) : trans1(t, b, c, d)) * f;			return t0 + t1;		}		static public function mixParams(trans0:Function, trans1:Function, fraction:Number, params0:Object=null, params1:Object=null):Object {			return {trans0: trans0, trans1: trans1, f: fraction, p0: params0, p1: params1};		}		/**		 * Sequentially combine easing functions.		 *		 * @param t		Current time (in frames or seconds).		 * @param b		Starting value.		 * @param c		Change needed in value.		 * @param d		Expected easing duration (in frames or seconds).		 * @param p_params 	Object: create using Twine.spliceParamsWithChange(...)		 * 								or Twine.spliceParamsWithTime(...)		 * 				ft			portion (0-1) of duration using first transition		 *				fc			portion (0-1) of change during first transition		 * 				trans0	equation 0		 * 				trans1	equation 1		 * 				p0			params for trans 0		 * 				p1			params for trans 1		 * @return		The correct value.		 * */		static public function splice(t:Number, b:Number, c:Number, d:Number, p_params:Object):Number {			var fc:Number=(!isNaN(p_params.fc)) ? p_params.fc : 0.5;			var ft:Number=(!isNaN(p_params.ft)) ? p_params.ft : 0.5			//could check for splicing at s==0 || s==1 but that will slow down			t/=d;			if (t < ft) {				t/=ft;				var trans0:Function=p_params.trans0;				if (p_params.p0)					return trans0(t, b, c * fc, 1, p_params.p0);				return trans0(t, b, c * fc, 1);			}			//else			t=(t - ft) / (1 - ft);			var trans1:Function=p_params.trans1;			if (p_params.p1)				return trans1(t, b + c * fc, c * (1 - fc), 1, p_params.p1);			return trans1(t, b + c * fc, c * (1 - fc), 1);		}		/**		 * Find parameters for spliced tween so that slopes match on exit of		 * first transition into second.Sign of slope at exit of trans0		 * must match that of trans1.		 *		 * @param trans0	equation 0		 * @param trans1	equation 1		 * @param f			portion (0-1) of time or change during first transition		 * @params withChange	whether time or change are defined by portion. 		 * @param p_params0	parameters for equation 1		 * @param p_params1	parameters for equation 2		 * @return		Object containing these as well as fc, the portion (0-1)		 * that results in matched slope		 *		 * Note: prior versions seperated this function into spliceParamsWithChange(...) and spliceParamsWithTime(...)		 * */		static public function spliceParams(trans0:Function, trans1:Function, f:Number, withChange:Boolean=false, p_params0:Object=null, p_params1:Object=null):Object {			//calculate change in first and second equations at end of first and start of second			var d1:Number=1 - Twine.getEasedValue(trans0, 0.995, p_params0); //*200			var d2:Number=Twine.getEasedValue(trans1, 0.005, p_params1); //*200						if(withChange){				return {trans0: trans0, trans1: trans1, fc: f, ft: Math.max(0,Math.min(1,f/(f+((1-f)*d2/d1)))), p0: p_params0, p1: p_params1};			}			return {trans0: trans0, trans1: trans1, fc: Math.max(0,Math.min(1,f/(f+((1-f)*d1/d2)))), ft:f , p0: p_params0, p1: p_params1};		}	}}